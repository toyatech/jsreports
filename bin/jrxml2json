#!/usr/local/bin/node

var fs = require('fs')
  , _ = require('underscore')
  , parser  = require('xml2json');

var filename = process.argv[2];

var xml = fs.readFileSync(filename);

var obj = parser.toJson(xml, { object: true });

var format = {
  style: 'styles',
  parameter: 'parameters',
  field: 'fields',
  variable: 'variables',
  group: 'groups'
};

var bands = [ 'title', 'pageHeader', 'columnHeader', 'detail', 'columnFooter',
  'pageFooter', 'summary'];

var ret = obj.jasperReport;

for (var f in format) {
  ret[format[f]] = ret[f];
  delete ret[f];
}

for (var i = 0; i < bands.length; ++i) {
  var band = ret[bands[i]].band;
  ret[bands[i]] = {height: band.height, elements: [] };
  delete band.height;
  _.each(bands, function(e) {
    if (_.isObject(bands[e])) {
      ret[bands[i]].elements.push(bands[e]);
    } else if (_.isArray(bands[e])) {
      for (var a in bands[e]) {
        ret[bands[i]].elements.push(bands[e][a]);
      }
    }
  }
}

for (var i = 0; i < ret.groups.length; ++i) {
  ret.groups[i].groupHeader = ret.groups[i].groupHeader.band;
  ret.groups[i].groupFooter = ret.groups[i].groupFooter.band;
}

function transform(obj) {
  for (var key in obj) {
    if (typeof obj === 'object') {
      if (Object.keys(obj).length === 0) {
        delete obj[key];
      } else {
        transform(obj[key]);
      }
    }
    if (typeof obj[key] === 'string') {
      obj[key] = _.unescape(_.unescape(obj[key]));
      if (obj[key] === "") {
        delete obj[key];
        continue;
      }
    }
    if (key === 'class') {
      obj.type = obj[key].slice(obj[key].lastIndexOf('.')+1);
      obj.type = mapType(obj.type);
      delete obj[key];
    }
    //if (key === '$t') {
    //  obj.value = obj[key];
    //  delete obj[key];
    //}
    if (key.substring(0,2) === 'is') {
      obj[key.substring(2,3).toLowerCase() + key.substring(3)] = obj[key];
      delete obj[key];
    }
  }
}

function mapType(type) {
  var map = {
    'String': 'String',
    'Timestamp': 'Date',
    'Long': 'Number',
    'Double': 'Number',
    'Float': 'Number',
    'Integer': 'Number'
  }; 
  if (Object.keys(map).indexOf(type)) {
    return map[type];
  }
}

transform(ret);

console.log(JSON.stringify(ret, null, 2));
