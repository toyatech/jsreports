#!/usr/local/bin/node

var fs = require('fs')
  , _ = require('underscore')
  , parser = require('xml2json')
  , pluralize = require('pluralize');

var filename = 'jasperreport.xsd';

var xsd = fs.readFileSync(filename);

var obj = parser.toJson(xsd, { object: true });

var jsd = {};

var names = {
  jasperReport: 'report'
}

var bands = [ 'background', 'title', 'pageHeader', 'columnHeader', 'detail', 'columnFooter', 
  'pageFooter', 'lastPageFooter', 'summary', 'noData' ];

var skips = ['import'];

function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

function formatName(name) {
  return _.has(names, name) ? capitalize(names[name]) : capitalize(name);
}

function formatReference(reference) {
  return reference.slice(3);
} 

var typeMap = {
  'string': { 'type': 'string' },
  'boolean': { 'type': 'boolean' },
  'float': { 'type': 'number' },
  'double': { 'type': 'number' },
  'decimal': { 'type': 'number' },
  'integer': { 'type': 'integer' },
  'positiveInteger': { 'type': 'integer', 'minimum': 0, 'exclusiveMinimum': true },
  'negativeInteger': { 'type': 'integer', 'maximum': 0, 'exclusiveMaximum': true },
  'nonPositiveInteger': { 'type': 'integer', 'maximum': 0, 'exclusiveMaximum': false },
  'nonNegativeInteger': { 'type': 'integer', 'minimum': 0, 'exclusiveMinimum': false }
};

var NMTOKEN = {};

function formatNMTOKEN(name) {
  if (_.has(NMTOKEN, name)) {
    return NMTOKEN[name];
  } else {
    return typeMap.integer;
  }
}

function formatType(type, name) {
  if (_.has(typeMap, type)) {
    return typeMap[type];
  } else if (type === 'NMTOKEN') {
    return formatNMTOKEN(name);
  } else {
    return {};
  }
}

function formatSimpleType(simpleType) {
  if (_.has(simpleType, 'restriction')) {
    if (_.has(simpleType.restriction, 'enumeration')) {
      var t = { 'type': 'string', 'enum': [] };
      var d = [];
      if (_.isArray(simpleType.restriction.enumeration)) {
        _.forEach(simpleType.restriction.enumeration, function(element) {
          t.enum.push(element.value);
          if (_.has(element, 'annotation')) {
            if (_.has(element.annotation, 'documentation')) {
              d.push(element.value + ': ' + element.annotation.documentation);
            }
          }
        });
      }
      if (!_.isEmpty(d)) {
        t.description = d.join('\n');
      }
      return t;
    }
  }
}

jsd.definitions = {};

_.forEach(obj.schema.element, function(element, index) {
  var s = {type: "object", properties: {}};
  var required = [];
  if (!_.contains(skips, element.name) && !_.contains(bands, element.name)) {
    if (_.has(element, 'complexType')) {
      if (_.has(element.complexType, 'attribute')) {
        if (_.isArray(element.complexType.attribute)) {
          _.forEach(element.complexType.attribute, function(element) {
            var o = {};

            // format types
            if (_.has(element, 'type')) {
              o = formatType(element.type, element.name);
            } else if (_.has(element, 'simpleType')) {
              o = formatSimpleType(element.simpleType);
            }
            // add default if available
            if (_.has(element, 'default')) { 
              o.default = element.default
            }
            // add documentation if available
            if (_.has(element, 'annotation')) {
              if (_.has(element.annotation, 'documentation')) {
                if (_.has(o, 'description')) {
                  o.description = element.annotation.documentation + '\n' + o.description;
                } else {
                  o.description = element.annotation.documentation;
                }
              }
            }
            // mark if required
            if (_.has(element, 'use')) {
              if (element.use === 'required') {
                required.push(element.name);
              }
            }
            s.properties[element.name] = o
          });
        }
      } 
      if (_.has(element.complexType, 'sequence')) {
        if (_.has(element.complexType.sequence, 'element')) {
          if (_.isArray(element.complexType.sequence.element)) {
            _.forEach(element.complexType.sequence.element, function(element) {
              if (_.has(element, 'ref')) {
                var key = formatReference(element.ref);
                if (!_.contains(skips, key)) {
                  var o = {};
                  if (element.maxOccurs === 'unbounded') {
                    o.type = 'array';
                    o.items = { '$ref': '#/definitions/' + formatName(key) };
                    key = pluralize(key);
                  } else if (element.maxOccurs === 1) {

                    o.type = 'object';

                    // collapse bands
                    if (_.contains(bands, key)) {
                      o.oneOf = [ { '$ref': '#/definitions/Band' } ];
                    } else {
                      o.oneOf = [ { '$ref': '#/definitions/' + formatName(key) } ];
                    }
                  }
                  s.properties[key] = o;
                }
              }
            });
          }
        }
      }
    }
    if (!_.isEmpty(required)) {
      s.required = required;
    }
    jsd.definitions[formatName(element.name)] = s;
  }
});

console.log(JSON.stringify(jsd, null, 2));
